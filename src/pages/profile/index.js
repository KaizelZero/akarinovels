import { useSession, useSupabaseClient } from "@supabase/auth-helpers-react";
import { useRouter } from "next/router";
import supabase from "@/utils/supabase";
import { useState, useEffect } from "react";
import {
	TableContainer,
	Table,
	Thead,
	Tr,
	Th,
	Tbody,
	Td,
	Button,
	Modal,
	ModalOverlay,
	ModalContent,
	ModalHeader,
	ModalFooter,
	ModalBody,
	ModalCloseButton,
	FormControl,
	Input,
	NumberInput,
	NumberInputField,
	NumberInputStepper,
	NumberIncrementStepper,
	NumberDecrementStepper,
	Select,
} from "@chakra-ui/react";
import Link from "next/link";
import { useDisclosure } from "@chakra-ui/react";
import { FaEllipsisH } from "react-icons/fa";
import Head from "next/head";

async function getNovels(profile) {
	const { data: novels, error } = await supabase
		.from("Library")
		.select(
			`
			novel_id,
			score,
			progress,
			status,
			Novels (
				id, 
				title,
				cover
			)`
		)
		.eq("username", profile)
		.order("score", { ascending: false });

	return novels;
}

export default function Profile() {
	const session = useSession();
	const router = useRouter();
	const profile = router.query.id;
	const [novels, setNovels] = useState([]);
	const { isOpen, onOpen, onClose } = useDisclosure();
	const [isInLibrary, setIsInLibrary] = useState(false);
	const [status, setStatus] = useState("");
	const [score, setScore] = useState();
	const [progress, setProgress] = useState();
	const [dateStarted, setDateStarted] = useState();
	const [dateFinished, setDateFinished] = useState();
	const [novelTitle, setNovelTitle] = useState("");
	const [selectedNovel, setSelectedNovel] = useState("");

	useEffect(() => {
		if (profile) {
			getNovels(profile).then((novels) => setNovels(novels));
		}
	}, [profile]);

	const getNovel = async (novel_id) => {
		const { data: novel, error } = await supabase
			.from("Library")
			.select(
				`
				novel_id,
				status,
				score,
				progress,
				date_started,
				date_finished,

				Novels (
					id,
					title
				)
			`
			)
			.eq("novel_id", novel_id)
			.eq("username", session.user.user_metadata.name);

		if (novel?.length > 0) {
			setIsInLibrary(true);
			setStatus(novel[0].status);
			setScore(novel[0].score);
			setProgress(novel[0].progress);
			setDateStarted(novel[0].date_started);
			setDateFinished(novel[0].date_finished);
			setNovelTitle(novel[0].Novels.title);
		} else {
			setIsInLibrary(false);
		}
	};

	const updateNovel = async (novel_id) => {
		const { data, error } = await supabase
			.from("Library")
			.update({
				status: status,
				score: score,
				progress: progress,
				date_started: dateStarted,
				date_finished: dateFinished,
			})
			.eq("novel_id", novel_id)
			.eq("username", session.user.user_metadata.name);

		if (error) {
			console.log(error);
		} else {
			console.log(data);
		}
	};

	const deleteNovel = async (novel_id) => {
		const { data, error } = await supabase
			.from("Library")
			.delete()
			.eq("novel_id", novel_id)
			.eq("username", session.user.user_metadata.name);

		if (error) {
			console.log(error);
		} else {
			console.log(data);
		}
	};

	return (
		<>
			<Head>
				<title>{profile}</title>

				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div>Profile</div>
			<div>{profile}</div>
			<TableContainer>
				<Table variant="simple">
					<Thead>
						<Tr>
							<Th></Th>
							<Th>Title</Th>
							<Th>Status</Th>
							<Th isNumeric>Score</Th>
							<Th isNumeric>Progress</Th>
						</Tr>
					</Thead>
					<Tbody>
						{novels.map((novel) => (
							<Tr key={novel.novel_id}>
								<Td>
									<FaEllipsisH className="hidden hover:flex" />
									<img
										src={novel.Novels.cover}
										alt={novel.Novels.title}
										style={{
											width: "50px",
											height: "50px",
											objectFit: "cover",
										}}
										className="cursor-pointer rounded-md hover:opacity-60 hover:shadow-lg"
										onClick={async () => {
											if (profile == session?.user.user_metadata.name) {
												await getNovel(novel.novel_id);
												setSelectedNovel(novel.novel_id);
												onOpen();
											}
										}}
									/>
									<Modal isOpen={isOpen} onClose={onClose}>
										<ModalOverlay />
										<ModalContent>
											<ModalHeader>{novelTitle}</ModalHeader>
											<ModalCloseButton />
											<ModalBody>
												<FormControl
													id="status"
													isRequired
													display="flex"
													flexDirection="column"
												>
													<label>Status</label>
													<Select
														value={status}
														onChange={(e) => setStatus(e.target.value)}
														variant={"filled"}
														defaultValue={
															novel.status ? novel.status : "Reading"
														}
													>
														<option value="Reading">Reading</option>
														<option value="Plan to Read">Plan to Read</option>
														<option value="Completed">Completed</option>
														<option value="On Hold">On Hold</option>
														<option value="Dropped">Dropped</option>
													</Select>

													<label>Score</label>
													<NumberInput
														max={10}
														min={0}
														value={score || 0}
														onChange={(value) => setScore(value)}
													>
														<NumberInputField />
														<NumberInputStepper>
															<NumberIncrementStepper />
															<NumberDecrementStepper />
														</NumberInputStepper>
													</NumberInput>

													<label>Progress</label>
													<NumberInput
														max={novel.chapters}
														min={0}
														value={progress || 0}
														onChange={(value) => setProgress(value)}
													>
														<NumberInputField />
														<NumberInputStepper>
															<NumberIncrementStepper />
															<NumberDecrementStepper />
														</NumberInputStepper>
													</NumberInput>

													<label>Date Started</label>
													<Input
														placeholder="Select Date"
														size="md"
														type="date"
														value={dateStarted ? dateStarted : ""}
														onChange={(e) => setDateStarted(e.target.value)}
													/>

													<label>Date Finished</label>
													<Input
														placeholder="Select Date"
														size="md"
														type="date"
														value={dateFinished ? dateFinished : ""}
														onChange={(e) => setDateFinished(e.target.value)}
													/>
												</FormControl>
											</ModalBody>
											<ModalFooter>
												<Button
													variant={"ghost"}
													colorScheme="red"
													onClick={async () => {
														await deleteNovel(selectedNovel);
														// refresh the page
														window.location.reload();
														onClose();
													}}
													size="sm"
												>
													Delete
												</Button>
												<Button
													variant="ghost"
													onClick={async () => {
														await updateNovel(selectedNovel);
														// refresh the page
														window.location.reload();
														onClose();
													}}
													size="sm"
													mr={3}
												>
													Save
												</Button>
											</ModalFooter>
										</ModalContent>
									</Modal>
								</Td>
								<Td>
									<Link href={`/novels/${novel.Novels.id}`}>
										{novel.Novels.title}
									</Link>
								</Td>
								<Td>{novel.status}</Td>
								<Td isNumeric>{novel.score}</Td>
								<Td isNumeric>{novel.progress}</Td>
							</Tr>
						))}
					</Tbody>
				</Table>
			</TableContainer>
		</>
	);
}
