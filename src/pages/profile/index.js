import { useSession, useSupabaseClient } from "@supabase/auth-helpers-react";
import { useRouter } from "next/router";
import supabase from "@/utils/supabase";
import { useState, useEffect } from "react";
import {
	TableContainer,
	Table,
	Thead,
	Tr,
	Th,
	Tbody,
	Td,
	Button,
	Modal,
	ModalOverlay,
	ModalContent,
	ModalHeader,
	ModalFooter,
	ModalBody,
	ModalCloseButton,
	FormControl,
	Input,
	NumberInput,
	NumberInputField,
	NumberInputStepper,
	NumberIncrementStepper,
	NumberDecrementStepper,
	Select,
	Center,
	useToast,
} from "@chakra-ui/react";
import Link from "next/link";
import { useDisclosure } from "@chakra-ui/react";
import { FaEllipsisH } from "react-icons/fa";
import Head from "next/head";

export default function Profile() {
	const session = useSession();
	const router = useRouter();
	const profile = router.query.id;
	const [novels, setNovels] = useState([]);
	const { isOpen, onOpen, onClose } = useDisclosure();
	const [isInLibrary, setIsInLibrary] = useState(false);
	const [status, setStatus] = useState("Reading");
	const [score, setScore] = useState();
	const [progress, setProgress] = useState();
	const [dateStarted, setDateStarted] = useState();
	const [dateFinished, setDateFinished] = useState();
	const [novelTitle, setNovelTitle] = useState("");
	const [selectedNovel, setSelectedNovel] = useState("");
	const [user, setUser] = useState([]);
	const toast = useToast();

	const getProfile = async (profile) => {
		if (!profile) return;
		const { data, error } = await supabase
			.from("Users")
			.select("id, avatar")
			.eq("name", profile);

		if (data) {
			setUser(data[0]);

			const { data: novels, error } = await supabase
				.from("Library")
				.select(
					`
				novel_id,
				score,
				progress,
				status,
				Novels (
					id,
					title,
					cover
				)`
				)
				.eq("user_id", data[0].id);

			if (novels) {
				setNovels(novels);
			}
		}
	};

	useEffect(() => {
		getProfile(profile);
	}, [profile]);

	const getNovel = async (novel_id) => {
		const { data: novel, error } = await supabase
			.from("Library")
			.select(
				`
				novel_id,
				status,
				score,
				progress,
				date_started,
				date_finished,

				Novels (
					id,
					title
				)
			`
			)
			.eq("novel_id", novel_id)
			.eq("user_id", session.user.id);

		if (novel?.length > 0) {
			setIsInLibrary(true);
			setStatus(novel[0].status);
			setScore(novel[0].score);
			setProgress(novel[0].progress);
			setDateStarted(novel[0].date_started);
			setDateFinished(novel[0].date_finished);
			setNovelTitle(novel[0].Novels.title);
		} else {
			setIsInLibrary(false);
		}
	};

	const updateNovel = async (novel_id) => {
		const { data, error } = await supabase
			.from("Library")
			.update({
				status: status,
				score: score,
				progress: progress,
				date_started: dateStarted,
				date_finished: dateFinished,
			})
			.eq("novel_id", novel_id)
			.eq("user_id", session.user.id);
	};

	const deleteNovel = async (novel_id) => {
		const { data, error } = await supabase
			.from("Library")
			.delete()
			.eq("novel_id", novel_id)
			.eq("user_id", session.user.id);

		if (!error) {
			setNovels(novels.filter((novel) => novel.novel_id !== novel_id));
		}
	};

	return (
		<>
			<Head>
				<title>{profile}</title>

				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Center className="my-8">
				<div>
					<img
						src={user?.avatar}
						alt="profile"
						className="h-32 w-32 rounded-lg"
					/>
				</div>
				<div
					className="ml-4
					text-4xl
					font-bold"
				>
					{profile}
				</div>
			</Center>
			<Center>
				<TableContainer className="w-2/3 rounded-lg border border-gray-400">
					<Table variant="simple">
						<Thead>
							<Tr>
								<Th></Th>
								<Th>Title</Th>
								<Th>Status</Th>
								<Th isNumeric>Score</Th>
								<Th isNumeric>Progress</Th>
							</Tr>
						</Thead>
						<Tbody>
							{novels?.map((novel) => (
								<Tr
									key={novel.novel_id}
									className="
								group
								m-0
								p-0
								hover:bg-gray-800
								"
								>
									<Td>
										<div
											onClick={async () => {
												if (profile == session?.user.user_metadata.name) {
													await getNovel(novel.novel_id);
													setSelectedNovel(novel.novel_id);
													onOpen();
												}
											}}
											style={{
												backgroundImage: `url(${novel.Novels.cover})`,
												width: "50px",
												height: "50px",
												backgroundSize: "cover",
												backgroundPosition: "center",
											}}
											className="m-0 rounded-md p-0 hover:shadow-lg"
										>
											{profile == session?.user.user_metadata.name && (
												<FaEllipsisH className="h-full w-full cursor-pointer rounded-md p-3 text-white opacity-0 group-hover:bg-teal-700 group-hover:opacity-100" />
											)}
										</div>

										<Modal isOpen={isOpen} onClose={onClose}>
											<ModalOverlay />
											<ModalContent>
												<ModalHeader>{novelTitle}</ModalHeader>
												<ModalCloseButton />
												<ModalBody>
													<FormControl
														id="status"
														isRequired
														display="flex"
														flexDirection="column"
													>
														<label>Status</label>
														<Select
															onChange={(e) => setStatus(e.target.value)}
															variant={"filled"}
															value={novel.status ? novel.status : status}
														>
															<option value="Reading">Reading</option>
															<option value="Plan to Read">Plan to Read</option>
															<option value="Completed">Completed</option>
															<option value="On Hold">On Hold</option>
															<option value="Dropped">Dropped</option>
														</Select>

														<label>Score</label>
														<NumberInput
															max={10}
															min={0}
															value={score || 0}
															onChange={(value) => setScore(value)}
														>
															<NumberInputField />
															<NumberInputStepper>
																<NumberIncrementStepper />
																<NumberDecrementStepper />
															</NumberInputStepper>
														</NumberInput>

														<label>Progress</label>
														<NumberInput
															max={novel.chapters}
															min={0}
															value={progress || 0}
															onChange={(value) => setProgress(value)}
														>
															<NumberInputField />
															<NumberInputStepper>
																<NumberIncrementStepper />
																<NumberDecrementStepper />
															</NumberInputStepper>
														</NumberInput>

														<label>Date Started</label>
														<Input
															placeholder="Select Date"
															size="md"
															type="date"
															value={dateStarted ? dateStarted : ""}
															onChange={(e) => setDateStarted(e.target.value)}
														/>

														<label>Date Finished</label>
														<Input
															placeholder="Select Date"
															size="md"
															type="date"
															value={dateFinished ? dateFinished : ""}
															onChange={(e) => setDateFinished(e.target.value)}
														/>
													</FormControl>
												</ModalBody>
												<ModalFooter>
													<Button
														variant={"ghost"}
														colorScheme="red"
														onClick={async () => {
															await deleteNovel(selectedNovel);
															toast({
																title: "Novel Deleted",
																description: "Novel has been deleted",
																status: "error",
																duration: 3000,
																isClosable: true,
															});
															onClose();
														}}
														size="sm"
													>
														Delete
													</Button>
													<Button
														variant="ghost"
														onClick={async () => {
															await updateNovel(selectedNovel);
															toast({
																title: "Novel Updated",
																description: "Novel has been updated",
																status: "success",
																duration: 3000,
																isClosable: true,
															});
															onClose();
														}}
														size="sm"
														mr={3}
													>
														Save
													</Button>
												</ModalFooter>
											</ModalContent>
										</Modal>
									</Td>
									<Td>
										<Link href={`/novels/${novel.Novels.id}`}>
											{novel.Novels.title}
										</Link>
									</Td>
									<Td>{novel.status}</Td>
									<Td isNumeric>{novel.score}</Td>
									<Td isNumeric>{novel.progress}</Td>
								</Tr>
							))}
						</Tbody>
					</Table>
				</TableContainer>
			</Center>
		</>
	);
}
